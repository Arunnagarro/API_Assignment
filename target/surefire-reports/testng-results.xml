<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="6" total="21" passed="12" failed="3" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-07-08T17:00:34Z" name="Surefire suite" finished-at="2022-07-08T17:00:47Z" duration-ms="13107">
    <groups>
    </groups>
    <test started-at="2022-07-08T17:00:34Z" name="Surefire test" finished-at="2022-07-08T17:00:47Z" duration-ms="13107">
      <class name="Base_Class.baseTest">
        <test-method is-config="true" signature="setReports()[pri:0, instance:Base_Class.baseTest@78365cfa]" started-at="2022-07-08T17:00:33Z" name="setReports" finished-at="2022-07-08T17:00:34Z" duration-ms="80" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setReports -->
        <test-method is-config="true" signature="endReport()[pri:0, instance:Base_Class.baseTest@78365cfa]" started-at="2022-07-08T17:00:47Z" name="endReport" finished-at="2022-07-08T17:00:47Z" duration-ms="153" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
      </class> <!-- Base_Class.baseTest -->
      <class name="Test_cases.CardTests">
        <test-method is-config="true" signature="basic_Details()[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:39Z" name="basic_Details" finished-at="2022-07-08T17:00:39Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- basic_Details -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:39Z" name="startTest" finished-at="2022-07-08T17:00:39Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Test_cases.CardTests.create_card() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method signature="create_card()[pri:5, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:39Z" name="create_card" finished-at="2022-07-08T17:00:40Z" duration-ms="889" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- create_card -->
        <test-method is-config="true" signature="endTest()[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:40Z" name="endTest" finished-at="2022-07-08T17:00:40Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTest -->
        <test-method is-config="true" signature="atestCaseResult(org.testng.ITestResult)[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:40Z" name="atestCaseResult" finished-at="2022-07-08T17:00:40Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=create_card status=SUCCESS method=CardTests.create_card()[pri:5, instance:Test_cases.CardTests@3f6db3fb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atestCaseResult -->
        <test-method is-config="true" signature="basic_Details()[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:40Z" name="basic_Details" finished-at="2022-07-08T17:00:40Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- basic_Details -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:40Z" name="startTest" finished-at="2022-07-08T17:00:40Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Test_cases.CardTests.updateCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method signature="updateCard()[pri:6, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:40Z" name="updateCard" finished-at="2022-07-08T17:00:40Z" duration-ms="738" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateCard -->
        <test-method is-config="true" signature="atestCaseResult(org.testng.ITestResult)[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:40Z" name="atestCaseResult" finished-at="2022-07-08T17:00:40Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateCard status=SUCCESS method=CardTests.updateCard()[pri:6, instance:Test_cases.CardTests@3f6db3fb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atestCaseResult -->
        <test-method is-config="true" signature="endTest()[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:40Z" name="endTest" finished-at="2022-07-08T17:00:40Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTest -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:40Z" name="startTest" finished-at="2022-07-08T17:00:40Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Test_cases.CardTests.getCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="basic_Details()[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:40Z" name="basic_Details" finished-at="2022-07-08T17:00:40Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- basic_Details -->
        <test-method signature="getCard()[pri:7, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:40Z" name="getCard" finished-at="2022-07-08T17:00:41Z" duration-ms="845" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCard -->
        <test-method is-config="true" signature="atestCaseResult(org.testng.ITestResult)[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:41Z" name="atestCaseResult" finished-at="2022-07-08T17:00:41Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCard status=SUCCESS method=CardTests.getCard()[pri:7, instance:Test_cases.CardTests@3f6db3fb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atestCaseResult -->
        <test-method is-config="true" signature="endTest()[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:41Z" name="endTest" finished-at="2022-07-08T17:00:41Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTest -->
        <test-method signature="create_a_new_label()[pri:8, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:41Z" name="create_a_new_label" finished-at="2022-07-08T17:00:42Z" duration-ms="813" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- create_a_new_label -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:41Z" name="startTest" finished-at="2022-07-08T17:00:41Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Test_cases.CardTests.create_a_new_label() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="basic_Details()[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:41Z" name="basic_Details" finished-at="2022-07-08T17:00:41Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- basic_Details -->
        <test-method signature="deleteLabel()[pri:9, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:42Z" name="deleteLabel" finished-at="2022-07-08T17:00:43Z" duration-ms="674" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteLabel -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:42Z" name="startTest" finished-at="2022-07-08T17:00:42Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Test_cases.CardTests.deleteLabel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="basic_Details()[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:42Z" name="basic_Details" finished-at="2022-07-08T17:00:42Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- basic_Details -->
        <test-method is-config="true" signature="endTest()[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:42Z" name="endTest" finished-at="2022-07-08T17:00:42Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTest -->
        <test-method is-config="true" signature="atestCaseResult(org.testng.ITestResult)[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:42Z" name="atestCaseResult" finished-at="2022-07-08T17:00:42Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=create_a_new_label status=SUCCESS method=CardTests.create_a_new_label()[pri:8, instance:Test_cases.CardTests@3f6db3fb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atestCaseResult -->
        <test-method is-config="true" signature="endTest()[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:43Z" name="endTest" finished-at="2022-07-08T17:00:43Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTest -->
        <test-method is-config="true" signature="atestCaseResult(org.testng.ITestResult)[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:43Z" name="atestCaseResult" finished-at="2022-07-08T17:00:43Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=deleteLabel status=SUCCESS method=CardTests.deleteLabel()[pri:9, instance:Test_cases.CardTests@3f6db3fb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atestCaseResult -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:43Z" name="startTest" finished-at="2022-07-08T17:00:43Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Test_cases.CardTests.deleteCard()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="basic_Details()[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:43Z" name="basic_Details" finished-at="2022-07-08T17:00:43Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- basic_Details -->
        <test-method signature="deleteCard()[pri:10, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:43Z" name="deleteCard" finished-at="2022-07-08T17:00:44Z" duration-ms="703" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteCard -->
        <test-method is-config="true" signature="endTest()[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:44Z" name="endTest" finished-at="2022-07-08T17:00:44Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTest -->
        <test-method is-config="true" signature="atestCaseResult(org.testng.ITestResult)[pri:0, instance:Test_cases.CardTests@3f6db3fb]" started-at="2022-07-08T17:00:44Z" name="atestCaseResult" finished-at="2022-07-08T17:00:44Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=deleteCard status=SUCCESS method=CardTests.deleteCard()[pri:10, instance:Test_cases.CardTests@3f6db3fb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atestCaseResult -->
      </class> <!-- Test_cases.CardTests -->
      <class name="Test_cases.BoardTests">
        <test-method is-config="true" signature="basic_Details()[pri:0, instance:Test_cases.BoardTests@64a8c844]" started-at="2022-07-08T17:00:34Z" name="basic_Details" finished-at="2022-07-08T17:00:34Z" duration-ms="520" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- basic_Details -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:Test_cases.BoardTests@64a8c844]" started-at="2022-07-08T17:00:34Z" name="startTest" finished-at="2022-07-08T17:00:34Z" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Test_cases.BoardTests.create_board() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method signature="create_board()[pri:1, instance:Test_cases.BoardTests@64a8c844]" started-at="2022-07-08T17:00:34Z" name="create_board" finished-at="2022-07-08T17:00:37Z" duration-ms="2514" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- create_board -->
        <test-method is-config="true" signature="endTest()[pri:0, instance:Test_cases.BoardTests@64a8c844]" started-at="2022-07-08T17:00:37Z" name="endTest" finished-at="2022-07-08T17:00:37Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTest -->
        <test-method is-config="true" signature="atestCaseResult(org.testng.ITestResult)[pri:0, instance:Test_cases.BoardTests@64a8c844]" started-at="2022-07-08T17:00:37Z" name="atestCaseResult" finished-at="2022-07-08T17:00:37Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=create_board status=SUCCESS method=BoardTests.create_board()[pri:1, instance:Test_cases.BoardTests@64a8c844] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atestCaseResult -->
        <test-method is-config="true" signature="basic_Details()[pri:0, instance:Test_cases.BoardTests@64a8c844]" started-at="2022-07-08T17:00:37Z" name="basic_Details" finished-at="2022-07-08T17:00:37Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- basic_Details -->
        <test-method signature="update_board()[pri:2, instance:Test_cases.BoardTests@64a8c844]" started-at="2022-07-08T17:00:37Z" name="update_board" finished-at="2022-07-08T17:00:37Z" duration-ms="736" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- update_board -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:Test_cases.BoardTests@64a8c844]" started-at="2022-07-08T17:00:37Z" name="startTest" finished-at="2022-07-08T17:00:37Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Test_cases.BoardTests.update_board() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="basic_Details()[pri:0, instance:Test_cases.BoardTests@64a8c844]" started-at="2022-07-08T17:00:37Z" name="basic_Details" finished-at="2022-07-08T17:00:37Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- basic_Details -->
        <test-method is-config="true" signature="atestCaseResult(org.testng.ITestResult)[pri:0, instance:Test_cases.BoardTests@64a8c844]" started-at="2022-07-08T17:00:37Z" name="atestCaseResult" finished-at="2022-07-08T17:00:37Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=update_board status=SUCCESS method=BoardTests.update_board()[pri:2, instance:Test_cases.BoardTests@64a8c844] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atestCaseResult -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:Test_cases.BoardTests@64a8c844]" started-at="2022-07-08T17:00:37Z" name="startTest" finished-at="2022-07-08T17:00:37Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Test_cases.BoardTests.get_board() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method signature="get_board()[pri:3, instance:Test_cases.BoardTests@64a8c844]" started-at="2022-07-08T17:00:37Z" name="get_board" finished-at="2022-07-08T17:00:38Z" duration-ms="651" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- get_board -->
        <test-method is-config="true" signature="endTest()[pri:0, instance:Test_cases.BoardTests@64a8c844]" started-at="2022-07-08T17:00:37Z" name="endTest" finished-at="2022-07-08T17:00:37Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTest -->
        <test-method is-config="true" signature="endTest()[pri:0, instance:Test_cases.BoardTests@64a8c844]" started-at="2022-07-08T17:00:38Z" name="endTest" finished-at="2022-07-08T17:00:38Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTest -->
        <test-method is-config="true" signature="atestCaseResult(org.testng.ITestResult)[pri:0, instance:Test_cases.BoardTests@64a8c844]" started-at="2022-07-08T17:00:38Z" name="atestCaseResult" finished-at="2022-07-08T17:00:38Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=get_board status=SUCCESS method=BoardTests.get_board()[pri:3, instance:Test_cases.BoardTests@64a8c844] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atestCaseResult -->
        <test-method is-config="true" signature="basic_Details()[pri:0, instance:Test_cases.BoardTests@64a8c844]" started-at="2022-07-08T17:00:38Z" name="basic_Details" finished-at="2022-07-08T17:00:38Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- basic_Details -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:Test_cases.BoardTests@64a8c844]" started-at="2022-07-08T17:00:38Z" name="startTest" finished-at="2022-07-08T17:00:38Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Test_cases.BoardTests.delete_board() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method signature="delete_board()[pri:4, instance:Test_cases.BoardTests@64a8c844]" started-at="2022-07-08T17:00:38Z" name="delete_board" finished-at="2022-07-08T17:00:39Z" duration-ms="886" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- delete_board -->
        <test-method is-config="true" signature="atestCaseResult(org.testng.ITestResult)[pri:0, instance:Test_cases.BoardTests@64a8c844]" started-at="2022-07-08T17:00:39Z" name="atestCaseResult" finished-at="2022-07-08T17:00:39Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=delete_board status=SUCCESS method=BoardTests.delete_board()[pri:4, instance:Test_cases.BoardTests@64a8c844] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atestCaseResult -->
        <test-method is-config="true" signature="endTest()[pri:0, instance:Test_cases.BoardTests@64a8c844]" started-at="2022-07-08T17:00:39Z" name="endTest" finished-at="2022-07-08T17:00:39Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTest -->
      </class> <!-- Test_cases.BoardTests -->
      <class name="Test_cases.CheckListTests">
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:44Z" name="startTest" finished-at="2022-07-08T17:00:44Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Test_cases.CheckListTests.createChecklist() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="basic_Details()[pri:0, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:44Z" name="basic_Details" finished-at="2022-07-08T17:00:44Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- basic_Details -->
        <test-method signature="createChecklist()[pri:11, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:44Z" name="createChecklist" finished-at="2022-07-08T17:00:44Z" duration-ms="659" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <200> but was <401>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <200> but was <401>.

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:72)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:59)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:263)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)
at io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)
at Test_cases.CheckListTests.createChecklist(CheckListTests.java:30)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createChecklist -->
        <test-method is-config="true" signature="atestCaseResult(org.testng.ITestResult)[pri:0, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:44Z" name="atestCaseResult" finished-at="2022-07-08T17:00:44Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChecklist status=FAILURE method=CheckListTests.createChecklist()[pri:11, instance:Test_cases.CheckListTests@52de51b6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atestCaseResult -->
        <test-method signature="updateCheckList()[pri:12, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:44Z" name="updateCheckList" finished-at="2022-07-08T17:00:45Z" duration-ms="631" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <200> but was <400>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <200> but was <400>.

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:72)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:59)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)
at io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)
at Test_cases.CheckListTests.updateCheckList(CheckListTests.java:47)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateCheckList -->
        <test-method is-config="true" signature="basic_Details()[pri:0, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:44Z" name="basic_Details" finished-at="2022-07-08T17:00:44Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- basic_Details -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:44Z" name="startTest" finished-at="2022-07-08T17:00:44Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Test_cases.CheckListTests.updateCheckList() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="endTest()[pri:0, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:44Z" name="endTest" finished-at="2022-07-08T17:00:44Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTest -->
        <test-method is-config="true" signature="endTest()[pri:0, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:45Z" name="endTest" finished-at="2022-07-08T17:00:45Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTest -->
        <test-method is-config="true" signature="basic_Details()[pri:0, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:45Z" name="basic_Details" finished-at="2022-07-08T17:00:45Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- basic_Details -->
        <test-method is-config="true" signature="atestCaseResult(org.testng.ITestResult)[pri:0, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:45Z" name="atestCaseResult" finished-at="2022-07-08T17:00:45Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateCheckList status=FAILURE method=CheckListTests.updateCheckList()[pri:12, instance:Test_cases.CheckListTests@52de51b6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atestCaseResult -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:45Z" name="startTest" finished-at="2022-07-08T17:00:45Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Test_cases.CheckListTests.getCheckList() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method signature="getCheckList()[pri:13, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:45Z" name="getCheckList" finished-at="2022-07-08T17:00:45Z" duration-ms="579" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCheckList -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:45Z" name="startTest" finished-at="2022-07-08T17:00:45Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Test_cases.CheckListTests.getTheCardAChecklistIsOn() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="endTest()[pri:0, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:45Z" name="endTest" finished-at="2022-07-08T17:00:45Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTest -->
        <test-method is-config="true" signature="atestCaseResult(org.testng.ITestResult)[pri:0, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:45Z" name="atestCaseResult" finished-at="2022-07-08T17:00:45Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCheckList status=SUCCESS method=CheckListTests.getCheckList()[pri:13, instance:Test_cases.CheckListTests@52de51b6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atestCaseResult -->
        <test-method signature="getTheCardAChecklistIsOn()[pri:14, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:45Z" name="getTheCardAChecklistIsOn" finished-at="2022-07-08T17:00:46Z" duration-ms="621" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <200> but was <400>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <200> but was <400>.

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:72)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:59)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)
at io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)
at Test_cases.CheckListTests.getTheCardAChecklistIsOn(CheckListTests.java:71)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTheCardAChecklistIsOn -->
        <test-method is-config="true" signature="basic_Details()[pri:0, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:45Z" name="basic_Details" finished-at="2022-07-08T17:00:45Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- basic_Details -->
        <test-method is-config="true" signature="atestCaseResult(org.testng.ITestResult)[pri:0, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:46Z" name="atestCaseResult" finished-at="2022-07-08T17:00:46Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getTheCardAChecklistIsOn status=FAILURE method=CheckListTests.getTheCardAChecklistIsOn()[pri:14, instance:Test_cases.CheckListTests@52de51b6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atestCaseResult -->
        <test-method is-config="true" signature="endTest()[pri:0, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:46Z" name="endTest" finished-at="2022-07-08T17:00:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTest -->
        <test-method signature="deleteCheckList()[pri:15, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:46Z" name="deleteCheckList" finished-at="2022-07-08T17:00:47Z" duration-ms="603" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteCheckList -->
        <test-method is-config="true" signature="basic_Details()[pri:0, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:46Z" name="basic_Details" finished-at="2022-07-08T17:00:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- basic_Details -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:46Z" name="startTest" finished-at="2022-07-08T17:00:46Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Test_cases.CheckListTests.deleteCheckList()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="atestCaseResult(org.testng.ITestResult)[pri:0, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:47Z" name="atestCaseResult" finished-at="2022-07-08T17:00:47Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=deleteCheckList status=SUCCESS method=CheckListTests.deleteCheckList()[pri:15, instance:Test_cases.CheckListTests@52de51b6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atestCaseResult -->
        <test-method is-config="true" signature="endTest()[pri:0, instance:Test_cases.CheckListTests@52de51b6]" started-at="2022-07-08T17:00:47Z" name="endTest" finished-at="2022-07-08T17:00:47Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTest -->
      </class> <!-- Test_cases.CheckListTests -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
